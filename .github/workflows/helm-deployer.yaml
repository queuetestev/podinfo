# This is a basic workflow to help you get started with Actions
name: Helm Deployer

# Controls when the workflow will run
on: 
  workflow_call:
    inputs:
      repository:
        description: Flux repository to open PR against
        type: string
        required: true
      cluster:
        type: string
        description: Cluster to modify HelmRelease in
        required: true
      namespace:
        type: string
        description: Namespace to modify HelmRelease in
        required: true
      artifact_name:
        type: string
        description: artifact name
        default: 'rendered-helmreleases'
    secrets:
      token:
        required: true
        description: Token to access flux repo
      

jobs:

  helm-deployer:

    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest
    permissions:
      issues: read
      checks: write
      packages: write
      actions: read
      contents: write  # for actions/checkout to fetch code
      pull-requests: write

    steps:

    - name: 'Checkout Source Code'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: evveryaaaa/${{ inputs.repository }}
        token: ${{ secrets.token }}
    
    - name: 'Download rendered templates'
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.artifact_name }}

    - name: 'Get branch Name'
      uses: actions/github-script@v6
      id: branch_naming
      env:
        suffix: ${{ github.event_name == 'push' && github.ref_name == 'master' && '_MASTER' || github.event_name == 'merge_group' && '_INTERNAL_MQ' || '_INTERNAL_ONDEMAND'   }}
      with:
        retries: 3
        script: |

          // Set loop control variable
          var completed = false

          var branch_name;
          var pr_url;
          var commit_url;

          if (context.eventName === 'merge_group'){

            const branch_ref = context.payload.merge_group.head_ref

            const after_last_slash = /'[^/]*$'/.exec(branch_ref)[0]

            const pr_number = after_last_slash.split('-')[1]

            const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
            });

            branch_name = `${pr.data.head.ref}-${context.repo.repo}${process.env.suffix}`
            pr_url = pr.data.html_url
            commit_url = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.payload.merge_group.head_sha}`
            
          } else if (context.eventName === 'push') {

              // Find project PR that generated this master commit and set branch name
              core.info('Listing pull requests to find the match of this commit')
              for await (const response of github.paginate.iterator(
                github.rest.pulls.list,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'all',
                  base: 'master',
                }
              )){
                

                for (const pull of response.data){
                  if (pull.merge_commit_sha == context.sha){
                    core.info('Matching pull request found, generating step outputs')
                    branch_name = `${pull.head.ref}-${context.repo.repo}${process.env.suffix}`
                    pr_url = pull.html_url
                    core.info('Outputs branch_name and pr_url have been generated successfully')
                    completed = true
                    break
                  }
                }

                if (completed){
                  break
                }
                
              }

              commit_url = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}`

              // If no PR is found for push in master event set branch name to feature/<project>-<sha>
              if (!completed){
                core.setOutput('branch_name',`feature/${context.repo.repo}-${context.sha}`)
                core.info('No matching PR was found, using default branch naming (feature/<project>-<sha>)')
          }

          } else if (context.eventName == 'workflow_dispatch') {

            branch_name = `${process.env.GITHUB_REF_NAME}-${context.repo.repo}${process.env.suffix}`

            if (context.payload.inputs.build == 'ondemand') {

              commit_url = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}`

            } 
            
          }

          core.setOutput('branch_name', branch_name)
          core.setOutput('pr_url', pr_url)
          core.setOutput('commit_url',commit_url)
          core.info('Outputs branch_name, pr_url, and commit_url have been generated successfully')

    - name: 'Copy files to proper route'
      if: github.event_name != 'push'
      id: copy_file
      env:
        MICROSERVICE: ${{ github.repository }}
        CLUSTER: ${{ inputs.cluster }}
        NAMESPACE: ${{ inputs.namespace }}
      run: |
        shopt -s extglob
        MICROSERVICE="${MICROSERVICE##*/}"
        cp ${MICROSERVICE}-* clusters/"${CLUSTER}"/"${NAMESPACE}"/
        rm ${MICROSERVICE}-*

    - name: 'Create Pull Request'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.token }}
        add-paths: 'clusters/${{ inputs.cluster }}/${{ inputs.namespace }}/*'
        commit-message: 'Automatic update clusters/${{ inputs.cluster }}/${{ inputs.namespace }}/${{ steps.copy_file.outputs.MICROSERVICE }} file via ${{ github.repository }} repository event'
        body: ${{ format('Automatic HelmRelease CRD updating via {0} repository event.{1}{2}', github.repository, steps.branch_naming.outputs.pr_url != '' && format(' [Associated PR]({0}).', steps.branch_naming.outputs.pr_url ) || '',  steps.branch_naming.outputs.commit_url != '' && format(' [Associated Commit]({0}).', steps.branch_naming.outputs.commit_url) || '') }}
        title: ${{ steps.branch_naming.outputs.branch_name }}
        branch: ${{ steps.branch_naming.outputs.branch_name }}
        delete-branch: true



  


